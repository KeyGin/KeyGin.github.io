<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ARTS Week4</title>
    <link href="undefinedarts/arts-week4/"/>
    <url>arts/arts-week4/</url>
    
    <content type="html"><![CDATA[<p>ARTS打卡第四周（2019.12.16 - 2019.12.22）</p><a id="more"></a><h1 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h1><h2 id="Problem-14-Longest-Common-Prefix"><a href="#Problem-14-Longest-Common-Prefix" class="headerlink" title="Problem 14. Longest Common Prefix"></a>Problem 14. Longest Common Prefix</h2><p>字符比较不可避免，快的核心在于减少遍历次数和if判断，这里有一个问题就是我没有检查两个比较字符串长度不同时数组越界。官网0ms执行速度的例子是采用了字符串删除的方式，减少了substr方法的时间开销。</p><pre><code class="c++">using namespace std;class Solution {public:    string longestCommonPrefix(vector&lt;string&gt; &amp;strs) {        string resultStr = &quot;&quot;, str, firstStr;        int minLength = 0;        // if vector is empty, then return empty string        if (strs.size() &gt; 0) {            firstStr = strs[0];            minLength = firstStr.length();        } else {            return resultStr;        }        for(int i = 1; i &lt; strs.size(); i++){            str = strs[i];            for(int j = 0; j &lt; minLength; j++){                if(str[j] != firstStr[j]){                    minLength = j;                }            }        }        resultStr = firstStr.substr(0, minLength);        return resultStr;    }};</code></pre><h2 id="Problem-20-Valid-Parentheses"><a href="#Problem-20-Valid-Parentheses" class="headerlink" title="Problem 20. Valid Parentheses"></a>Problem 20. Valid Parentheses</h2><p>我这里的问题是计算量过多，比较太多，官方0ms的例子是用swtich处理，栈里面直接存入匹配的符号，这样是可以直接比较的，不需要做计算。</p><pre><code class="c++">class Solution {public:    bool isValid(string s) {        // we know this parentheses in ascii code is:        // [ - 91        // ] - 93        // ( - 40        // ) - 41        // { - 123        // } - 125        if(s.length() &gt; 1){            // create a stack to store waiting for parentheses character            int arrIndex = 0;            int arrLength = s.length() * .5f + 1;            int arr[arrLength];            for (int i = 0; i &lt; s.length(); i++) {                int c = s[i];                // true only the character is &#39;[&#39;, &#39;(&#39; and &#39;{&#39;, which ascii code is 91, 40, 123                if ((c - 41) &amp; (c - 125) &amp; (c - 93)) {                    // stack full, which means it can&#39;t finish parentheses                    if(arrIndex &lt; arrLength){                        return false;                    }                    arr[arrIndex++] = c;                } else {                    // the calculate result is 0, means this character need to check parentheses                    if(arrIndex &lt; 1){                        return false;                    }                    int step = c - arr[--arrIndex];                    if (step &gt; 2 || step &lt; 0) {                        return false;                    }                }            }            // if arrIndex &gt; 0, array arr not clear, it means parentheses invalid            return !arrIndex;        } else {            return !s.length();        }    }};</code></pre><h2 id="Problem-26-Remove-Duplicates-from-Sorted-Array"><a href="#Problem-26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Problem 26. Remove Duplicates from Sorted Array"></a>Problem 26. Remove Duplicates from Sorted Array</h2><p>这个题我做了2种实现，第一种是基于数组删除元素的，第二种是基于iterator删除元素的。看完官方给出的速度快的案例后，我发现我不用去做删除动作，有点无语。</p><pre><code class="c++">using namespace std;class Solution {public:    // 最终的改进版    int removeDuplicates(vector&lt;int&gt; &amp;nums) {        if(nums.size() &gt; 1){            int index = 0;            for (int i = 1; i &lt; nums.size(); i++) {                if (nums.at(index) &lt; nums.at(i)) {                    nums[++index] = nums[i];                }            }            return index + 1;        } else {            return nums.size();        }    }    // 基于iterator做的实现    int removeDuplicates_iterator(vector&lt;int&gt; &amp;nums) {        int index = 0;        vector&lt;int&gt;::iterator it = nums.begin();        for (int i = 1; i &lt; nums.size(); i++) {            if (nums.at(index) &lt; nums.at(i)) {                nums[++index] = nums[i];                it++;            }        }        it++;        nums.erase(it, nums.end());        return nums.size();    }    // 基于数组做的实现    int removeDuplicates_arr(vector&lt;int&gt;&amp; nums) {        int index = 0;        vector&lt;int&gt;::iterator it = nums.begin();        for (int i = 1; i &lt; nums.size(); i++) {            if (nums.at(index) &lt; nums.at(i)) {                nums[++index] = nums[i];            }        }        index++;        for (int i = nums.size(); i &gt; index; i--) {            nums.pop_back();        }        return nums.size();    }};</code></pre><h2 id="Problem-27-Remove-Element"><a href="#Problem-27-Remove-Element" class="headerlink" title="Problem 27. Remove Element"></a>Problem 27. Remove Element</h2><p>这道题的难点是在第一个元素的处理，如果第一个元素和要移除的值一样，用数组处理时要注意元素的索引。</p><pre><code class="c++">using namespace std;class Solution {public:    int removeElement(vector&lt;int&gt;&amp; nums, int val) {        if (nums.size() &lt; 1) {            return 0;        }        int index = 0;        for (int i = 0; i &lt; nums.size(); i++) {            if (val != nums[i]) {                nums[index++] = nums[i];            }        }        return index;    }    int removeElement_iterator(vector&lt;int&gt; &amp;nums, int val) {        if (nums.size() &lt; 1) {            return 0;        }        vector&lt;int&gt;::iterator it = nums.begin();        while (it &lt; nums.end()) {            if (*it == val) {                nums.erase(it);                it = nums.begin();            } else {                it++;            }        }        return nums.size();    }};</code></pre><h2 id="Problem-28-Implement-strStr"><a href="#Problem-28-Implement-strStr" class="headerlink" title="Problem 28. Implement strStr()"></a>Problem 28. Implement strStr()</h2><pre><code class="c++">using namespace std;class Solution {public:    int strStr(string haystack, string needle) {        if (needle == &quot;&quot;) {            return 0;        }        if (needle.length() &gt; haystack.length()) {            return -1;        }        int i = 0, j = 0;        while (i &lt; haystack.length()) {            if (haystack[i] == needle[j]) {                i++;                j++;            } else {                if (j &lt; needle.length()) {                    i = i - j + 1;                    j = 0;                } else {                    return i - j;                }            }        }        if (j &lt; needle.length()) {            return -1;        } else {            return i - j;        }    }    // 执行时间 120ms，内存消耗646.2MB    int strStr_v2(string haystack, string needle) {        if (needle == &quot;&quot;) {            return 0;        }        vector&lt;int&gt; v;        int needleLength = needle.length();        for (int i = 0; i &lt; haystack.length(); i++) {            if (!(haystack[i] - needle[0])) {                v.push_back(i);            }        }        for (int i = 0; i &lt; v.size(); i++) {            string str = haystack.substr(v[i], needleLength);            if (str == needle) {                return v[i];            }        }        return -1;    }    // 执行时间 1660 ms，内存消耗 9.1MB    int strStr_v1(string haystack, string needle) {        if (needle == &quot;&quot;) {            return 0;        }        for (int i = 0; i &lt; haystack.length(); i++) {            if (!(haystack[i] - needle[0])) {                int flag = 1;                for (int j = i + 1; j &lt; i + needle.length(); j++) {                    if (haystack[j] - needle[flag]) {                        flag = 0;                        break;                    } else {                        flag++;                    }                }                if (flag) {                    return i;                }            }        }        return -1;    }};</code></pre><h2 id="Problem-35-Search-Insert-Position"><a href="#Problem-35-Search-Insert-Position" class="headerlink" title="Problem 35. Search Insert Position"></a>Problem 35. Search Insert Position</h2><pre><code class="c++">using namespace std;class Solution {public:    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {        for(int i = 0; i &lt; nums.size(); i++){            if(target &gt; nums[i]){            } else {                return i;            }        }        return nums.size();    }};</code></pre><h2 id="Problem-38-Count-and-Say"><a href="#Problem-38-Count-and-Say" class="headerlink" title="Problem 38. Count and Say"></a>Problem 38. Count and Say</h2><pre><code class="c++">using namespace std;class Solution {public:    string countAndSay(int n){        string result = &quot;1&quot;, bufferResult = &quot;&quot;;        if(n &gt; 1){            int index = 1;            char num = &#39;0&#39;, compareNum = result[0], counter = &#39;1&#39;;            while(n &gt; 1){                if(index &lt; result.length()){                    // not clearly read                    char num = result[index];                    if(num == compareNum){                        counter++;                    } else {                        bufferResult.append(1, counter);                        bufferResult.append(1, compareNum);                        compareNum = num;                        counter = &#39;1&#39;;                    }                    index++;                } else {                    bufferResult.append(1, counter);                    bufferResult.append(1, compareNum);                    result = bufferResult;                    bufferResult = &quot;&quot;;                    counter = &#39;1&#39;;                    index = 1;                    compareNum = result[0];                    n--;                }            }        }        return result;    }};</code></pre><h1 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h1><ul><li><p><a href="https://dzone.com/articles/jvm-architecture-explained" target="_blank" rel="noopener">The JVM Architecture Explained</a></p><p>  文章解释了JVM的架构，很全面。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1></li><li><p>比起用索引循环比对确定字符串是否包含另外一个字符串，使用substr要占用更多的内存。</p></li><li><p>在嵌套循环遍历数组的时候，使用单循环双索引的方式遍历速度比嵌套循环遍历的速度要快很多。</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1></li><li><p>这周在做一个系统的业务分析，发现使用脑图抓住系统的核心点，再由核心点去发散到各个细节，可以快速的理清现有的业务点，前后关系以及业务的流程，还能做到查漏补缺。</p></li><li><p>推荐一个好的免费英语单词记忆应用【不背单词】。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>geektime</category>
      
      <category>arts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geektime</tag>
      
      <tag>arts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARTS Week 3</title>
    <link href="undefinedarts/arts-week3/"/>
    <url>arts/arts-week3/</url>
    
    <content type="html"><![CDATA[<p>ARTS 打卡第三周</p><a id="more"></a><h1 id="ARTS-打卡第三周-2019-12-09-2019-12-15"><a href="#ARTS-打卡第三周-2019-12-09-2019-12-15" class="headerlink" title="ARTS 打卡第三周(2019.12.09 - 2019.12.15)"></a>ARTS 打卡第三周(2019.12.09 - 2019.12.15)</h1><h2 id="Algrithms"><a href="#Algrithms" class="headerlink" title="Algrithms"></a>Algrithms</h2><h3 id="A-9-Palindrome-Number"><a href="#A-9-Palindrome-Number" class="headerlink" title="A 9. Palindrome Number"></a>A 9. Palindrome Number</h3><pre><code class="c++">class Solution {public:    bool isPalindrome(int x) {        if (x &lt; 0 || (x % 10 == 0 &amp;&amp; x != 0)) {            return false;        }        int j = 0;        while (x &gt; j) {            j = j * 10 + x % 10;            x = x / 10;        }        return j == x || x == (j / 10);    }};</code></pre><h3 id="B-13-Roman-to-Integer"><a href="#B-13-Roman-to-Integer" class="headerlink" title="B 13. Roman to Integer"></a>B 13. Roman to Integer</h3><pre><code class="c++">class Solution {public:    int romanToInt(string s) {        int sizes = s.size();        char c;        int j, prev = 0, value = 0;        for (int i = 0; i &lt; sizes; i++) {            c = s.at(i);            switch (c) {                case &#39;I&#39;:                    j = 1;                    break;                case &#39;V&#39;:                    j = 5;                    break;                case &#39;X&#39;:                    j = 10;                    break;                case &#39;L&#39;:                    j = 50;                    break;                case &#39;C&#39;:                    j = 100;                    break;                case &#39;D&#39;:                    j = 500;                    break;                case &#39;M&#39;:                    j = 1000;                    break;                default:                    break;            }            if (value &lt; j) {                value = j - value;            } else {                if (prev &lt; j) {                    j = j - prev - prev;                }                value = value + j;            }            prev = j;        }        return value;    }};</code></pre><h2 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h2><ul><li><p><a href="https://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="noopener">HATEOAS</a> </p><p>  Hypermedia As The Engine Of Application State, 在我看来，就是在一个Restful请求返回中，体现出可以利用已知数据做什么后续操作的结构，这样可以减少一些重复开发。</p></li></ul><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li><p>IP地址和32位整数的相互转换，因为IP地址每一位区间都是8位无符号整数，即（0 ~ 255）：</p><ol><li><p>IP转32位整数，假设有IP为192.168.0.28，可以转换为，长度不足8位的，前面补0得到8位：</p><ul><li><p>192 = 11000000</p></li><li><p>168 = 10101000</p></li><li><p>&nbsp;&nbsp;&nbsp; 0 = 00000000</p></li><li><p>&nbsp; 28 = 00011100</p><p>计算后，合并后得到二级制数据11000000101010000000000000011100，转换为十进制得到3232235548。这个数就是IP的32位整数表示法。</p></li></ul></li><li><p>32位整数转IP，假设有整数678941235，我们可以转换二进制得到101000011101111101001000110011，其中二进制数字长度不足24位，所以我们在前面补2个0，可以转换为：</p><ul><li><p>00101000 = 40</p></li><li><p>01110111 = 119</p></li><li><p>11010010 = 210</p></li><li><p>00110011 = 51</p><p>这样我们就算得了IP是40.119.210.51。</p></li></ul></li><li><p>注意点：IP地址最大不超过255.255.255.255，也就意味着二进制数据不能大于24个1。</p></li></ol></li></ul><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><ul><li><p>摘自 &lt;&lt; Redis Microservices For Dummies &gt;&gt; Chapter1：When breaking down (decomposing) a monolithic architecture, you have worry about many factors:</p><ol><li><p><B>Gradualizing into services:</B> Moving from a single deliverable to many small services is a radical shift and requires careful planning.</p></li><li><p><B>Splitting at the right places:</B> When breaking a monolith, you have to take a step back and really think about where the most logical places are to divide responsibilities into services. At the same time, you want to avoid getting stuck in how your current application is built; instead, rethink without the technical debt of the past.</p></li><li><p><B>Transitioning a team:</B> Making changes to monoliths is really easy — perhaps too easy — in code. While you may need to touch dozens of function calls to deploy a single feature, your team can do this easily (testing and deploying is another issue). Isolating teams to build services also isolates teams from making changes in places for which they aren’t responsible. A double-edged sword!</p><p>逐步服务化、在正确的地方划分服务和团队过渡，这三个点都很重要，一个巨无霸的项目不可能一朝一夕就完成全部服务化，肯定要有一个过程，这就需要我们在进行服务化的时候更加的小心，在逐步服务化的过程中，肯定会碰到一些逻辑巨复杂的功能，这个时候就需要我们抛去已有逻辑处理和技术实现给我们带来的影响，站在一个更高的角度来看待服务怎么划分；服务化的过程中还会碰到团队过渡的问题，以往的一个人多功能修改的，甚至一个功能多个人修改的情况，出现问题会很难进行责任划分，在逐步服务化的过程中，也要把团队内每个人负责的模块设置好，不要出现责任划分不清晰的情况。</p></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>geektime</category>
      
      <category>arts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geektime</tag>
      
      <tag>arts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARTS Week 2</title>
    <link href="undefinedarts/arts-week2/"/>
    <url>arts/arts-week2/</url>
    
    <content type="html"><![CDATA[<p>ARTS 打卡第二周</p><a id="more"></a><h1 id="ARTS打卡第二周-2019-12-02-2019-12-08"><a href="#ARTS打卡第二周-2019-12-02-2019-12-08" class="headerlink" title="ARTS打卡第二周(2019.12.02 - 2019.12.08)"></a>ARTS打卡第二周(2019.12.02 - 2019.12.08)</h1><h2 id="Algrithms"><a href="#Algrithms" class="headerlink" title="Algrithms"></a>Algrithms</h2><h3 id="A-LeetCode-8-String-to-Integer-atoi"><a href="#A-LeetCode-8-String-to-Integer-atoi" class="headerlink" title="A. LeetCode 8. String to Integer (atoi)"></a>A. LeetCode 8. String to Integer (atoi)</h3><pre><code class="c++">using namespace std;class Solution {public:    int myAtoi(string str) {        int first_is_digital = -1;        int sign = 1;        int temp = 0;        int digital;        int low_max = INT32_MAX / 10;        int low_min = INT32_MIN / 10;        char ch;        for (int i = 0; i &lt; str.size(); i++) {            ch = str[i];            if (ch &gt; 57 || ch &lt; 48) {                if (first_is_digital &lt; 0) {                    if (ch == 32) {                        continue;                    } else if (ch == 45) {                        sign = -1;                        first_is_digital = 0;                    } else if (ch == 43) {                        first_is_digital = 0;                    } else {                        return temp;                    }                } else {                    return temp;                }                digital = 0;            } else {                first_is_digital = 1;                digital = ch - 48;                digital = digital * sign;            }            if (temp &gt; low_max || (temp == low_max &amp;&amp; digital &gt; 7)) {                return INT32_MAX;            }            if (temp &lt; low_min || (temp == low_min &amp;&amp; digital &lt; -8)) {                return INT32_MIN;            }            temp = temp * 10 + digital;        }        return temp;    }};</code></pre><h2 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h2><ul><li><a href="https://dzone.com/articles/what-developers-need-to-know-about-java-security" target="_blank" rel="noopener">What Developers Need to Know About Java Security</a><br>重复造轮子，也许你写的代码在当时是很好的，很安全的，随着时间的流逝，你不能保证你的代码不会随着业务变更而被其他人修改，从而变的不安全，最好的方式是用一些大家常用的库，团队内部做安全审查就好了。</li></ul><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li>最近公司想要抓取微博热搜上的数据，以前没有接触过爬虫，这周用python试过，后面发现和java集成不太好弄，于是换成了用java去抓取网页，经过这样一折腾，我发现其实爬虫就是抓取网页数据，分析网页数据的一个过程，和用什么语言去实现并没有太大关系</li></ul><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><ul><li><a href="https://dzone.com/articles/understanding-linux-runlevels-the-right-way" target="_blank" rel="noopener">Understanding Linux Runlevels, the Right Way</a><br>在这篇文章学到了Linux运行等级runlevels，同时文章也延展到了现在常用的systemd。</li></ul>]]></content>
    
    
    <categories>
      
      <category>geektime</category>
      
      <category>arts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geektime</tag>
      
      <tag>arts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARTS Week 1</title>
    <link href="undefinedarts/arts-week1/"/>
    <url>arts/arts-week1/</url>
    
    <content type="html"><![CDATA[<p>ARTS 打卡第一周</p><a id="more"></a><h1 id="ARTS第一周-2019-11-25-2019-12-01"><a href="#ARTS第一周-2019-11-25-2019-12-01" class="headerlink" title="ARTS第一周 (2019.11.25 - 2019.12.01)"></a>ARTS第一周 (2019.11.25 - 2019.12.01)</h1><h2 id="1-Algrithm"><a href="#1-Algrithm" class="headerlink" title="1. Algrithm"></a>1. Algrithm</h2><h3 id="A-LeetCode-7-Reverse-Integer"><a href="#A-LeetCode-7-Reverse-Integer" class="headerlink" title="A. LeetCode 7. Reverse Integer"></a>A. LeetCode 7. Reverse Integer</h3><p>这是解题编码。</p><pre><code class="python">class Solution:    def reverse(self, x: int) -&gt; int:        if x == 0:            return 0        x_str = str(abs(x))        direct_reverse_length = 9        usigned_max_int_str = &quot;2147483647&quot;        usigned_min_int_str = &quot;2147483648&quot;        x_sign = int(x / abs(x))        x_len = len(x_str)        index = 0        if x_len &gt; direct_reverse_length:            if x_len &gt; 10:                step = x_str[10:x_str]                if int(step) &gt; 0:                    return 0                else:                    x_len = 10            if x_sign &gt; 0:                limit_arr = list(usigned_max_int_str)            else:                limit_arr = list(usigned_min_int_str)            last_index = x_len - 1            x_arr = list(x_str[0:x_len])            flag = True            while last_index &gt;= 0:                if flag:                    if x_arr[last_index] &gt; limit_arr[index]:                        return 0                    elif x_arr[last_index] &lt; limit_arr[index]:                        flag = False                limit_arr[index] = x_arr[last_index]                index+=1                last_index-=1            x_str = &#39;&#39;.join(limit_arr)        else:            x_arr = list(x_str)            last_index = x_len - 1            while last_index &gt; index:                buff = x_arr[index]                x_arr[index] = x_arr[last_index]                x_arr[last_index] = buff                index+=1                last_index-=1            x_str = &#39;&#39;.join(x_arr)        result = int(x_str) * x_sign        return result</code></pre><h2 id="2-Review"><a href="#2-Review" class="headerlink" title="2. Review"></a>2. Review</h2><p>在Dzone上看到的，<a href="https://dzone.com/articles/approaches-to-storing-application-parameters-metad" target="_blank" rel="noopener">3 Approaches to Storing Application Parameters and Metadata</a>。</p><p>原先我以为把数据解析成csv逗号分隔符，数据可读性会很差，这个哥们给了我一个新的思路，就是可以在数据的前面加一个列名，用另外一个特殊字符隔开，这样子可读性就大大增强了。如(id:1,name:demo,passwd:123)，就是源数据(1,demo,123)的加强版，相对来说，可读性大大增强了。</p><h2 id="3-Tip"><a href="#3-Tip" class="headerlink" title="3. Tip"></a>3. Tip</h2><ul><li>Dorado datapath的巧用，在更新数据的时候，可以用[#deleted]表示页面删除的数据，[#new]表示新建的数据。</li></ul><h2 id="4-Share"><a href="#4-Share" class="headerlink" title="4. Share"></a>4. Share</h2><ul><li><a href="https://dzone.com/articles/approaches-to-storing-application-parameters-metad" target="_blank" rel="noopener">3 Approaches to Storing Application Parameters and Metadata</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>geektime</category>
      
      <category>arts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geektime</tag>
      
      <tag>arts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefinedhello-world/"/>
    <url>hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>