<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ARTS Week 2</title>
    <link href="undefinedarts/arts-week2/"/>
    <url>arts/arts-week2/</url>
    
    <content type="html"><![CDATA[<p>ARTS 打卡第二周</p><a id="more"></a><h1 id="ARTS打卡第二周-2019-12-02-2019-12-08"><a href="#ARTS打卡第二周-2019-12-02-2019-12-08" class="headerlink" title="ARTS打卡第二周(2019.12.02 - 2019.12.08)"></a>ARTS打卡第二周(2019.12.02 - 2019.12.08)</h1><h2 id="Algrithms"><a href="#Algrithms" class="headerlink" title="Algrithms"></a>Algrithms</h2><h3 id="A-LeetCode-8-String-to-Integer-atoi"><a href="#A-LeetCode-8-String-to-Integer-atoi" class="headerlink" title="A. LeetCode 8. String to Integer (atoi)"></a>A. LeetCode 8. String to Integer (atoi)</h3><pre><code class="c++">using namespace std;class Solution {public:    int myAtoi(string str) {        int first_is_digital = -1;        int sign = 1;        int temp = 0;        int digital;        int low_max = INT32_MAX / 10;        int low_min = INT32_MIN / 10;        char ch;        for (int i = 0; i &lt; str.size(); i++) {            ch = str[i];            if (ch &gt; 57 || ch &lt; 48) {                if (first_is_digital &lt; 0) {                    if (ch == 32) {                        continue;                    } else if (ch == 45) {                        sign = -1;                        first_is_digital = 0;                    } else if (ch == 43) {                        first_is_digital = 0;                    } else {                        return temp;                    }                } else {                    return temp;                }                digital = 0;            } else {                first_is_digital = 1;                digital = ch - 48;                digital = digital * sign;            }            if (temp &gt; low_max || (temp == low_max &amp;&amp; digital &gt; 7)) {                return INT32_MAX;            }            if (temp &lt; low_min || (temp == low_min &amp;&amp; digital &lt; -8)) {                return INT32_MIN;            }            temp = temp * 10 + digital;        }        return temp;    }};</code></pre><h2 id="Reviews"><a href="#Reviews" class="headerlink" title="Reviews"></a>Reviews</h2><ul><li><a href="https://dzone.com/articles/what-developers-need-to-know-about-java-security" target="_blank" rel="noopener">What Developers Need to Know About Java Security</a><br>重复造轮子，也许你写的代码在当时是很好的，很安全的，随着时间的流逝，你不能保证你的代码不会随着业务变更而被其他人修改，从而变的不安全，最好的方式是用一些大家常用的库，团队内部做安全审查就好了。</li></ul><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li>最近公司想要抓取微博热搜上的数据，以前没有接触过爬虫，这周用python试过，后面发现和java集成不太好弄，于是换成了用java去抓取网页，经过这样一折腾，我发现其实爬虫就是抓取网页数据，分析网页数据的一个过程，和用什么语言去实现并没有太大关系</li></ul><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><ul><li><a href="https://dzone.com/articles/understanding-linux-runlevels-the-right-way" target="_blank" rel="noopener">Understanding Linux Runlevels, the Right Way</a><br>在这篇文章学到了Linux运行等级runlevels，同时文章也延展到了现在常用的systemd。</li></ul>]]></content>
    
    
    <categories>
      
      <category>geektime</category>
      
      <category>arts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geektime</tag>
      
      <tag>arts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARTS Week 1</title>
    <link href="undefinedarts/arts-week1/"/>
    <url>arts/arts-week1/</url>
    
    <content type="html"><![CDATA[<p>ARTS 打卡第一周</p><a id="more"></a><h1 id="ARTS第一周-2019-11-25-2019-12-01"><a href="#ARTS第一周-2019-11-25-2019-12-01" class="headerlink" title="ARTS第一周 (2019.11.25 - 2019.12.01)"></a>ARTS第一周 (2019.11.25 - 2019.12.01)</h1><h2 id="1-Algrithm"><a href="#1-Algrithm" class="headerlink" title="1. Algrithm"></a>1. Algrithm</h2><h3 id="A-LeetCode-7-Reverse-Integer"><a href="#A-LeetCode-7-Reverse-Integer" class="headerlink" title="A. LeetCode 7. Reverse Integer"></a>A. LeetCode 7. Reverse Integer</h3><p>这是解题编码。</p><pre><code class="python">class Solution:    def reverse(self, x: int) -&gt; int:        if x == 0:            return 0        x_str = str(abs(x))        direct_reverse_length = 9        usigned_max_int_str = &quot;2147483647&quot;        usigned_min_int_str = &quot;2147483648&quot;        x_sign = int(x / abs(x))        x_len = len(x_str)        index = 0        if x_len &gt; direct_reverse_length:            if x_len &gt; 10:                step = x_str[10:x_str]                if int(step) &gt; 0:                    return 0                else:                    x_len = 10            if x_sign &gt; 0:                limit_arr = list(usigned_max_int_str)            else:                limit_arr = list(usigned_min_int_str)            last_index = x_len - 1            x_arr = list(x_str[0:x_len])            flag = True            while last_index &gt;= 0:                if flag:                    if x_arr[last_index] &gt; limit_arr[index]:                        return 0                    elif x_arr[last_index] &lt; limit_arr[index]:                        flag = False                limit_arr[index] = x_arr[last_index]                index+=1                last_index-=1            x_str = &#39;&#39;.join(limit_arr)        else:            x_arr = list(x_str)            last_index = x_len - 1            while last_index &gt; index:                buff = x_arr[index]                x_arr[index] = x_arr[last_index]                x_arr[last_index] = buff                index+=1                last_index-=1            x_str = &#39;&#39;.join(x_arr)        result = int(x_str) * x_sign        return result</code></pre><h2 id="2-Review"><a href="#2-Review" class="headerlink" title="2. Review"></a>2. Review</h2><p>在Dzone上看到的，<a href="https://dzone.com/articles/approaches-to-storing-application-parameters-metad" target="_blank" rel="noopener">3 Approaches to Storing Application Parameters and Metadata</a>。</p><p>原先我以为把数据解析成csv逗号分隔符，数据可读性会很差，这个哥们给了我一个新的思路，就是可以在数据的前面加一个列名，用另外一个特殊字符隔开，这样子可读性就大大增强了。如(id:1,name:demo,passwd:123)，就是源数据(1,demo,123)的加强版，相对来说，可读性大大增强了。</p><h2 id="3-Tip"><a href="#3-Tip" class="headerlink" title="3. Tip"></a>3. Tip</h2><ul><li>Dorado datapath的巧用，在更新数据的时候，可以用[#deleted]表示页面删除的数据，[#new]表示新建的数据。</li></ul><h2 id="4-Share"><a href="#4-Share" class="headerlink" title="4. Share"></a>4. Share</h2><ul><li><a href="https://dzone.com/articles/approaches-to-storing-application-parameters-metad" target="_blank" rel="noopener">3 Approaches to Storing Application Parameters and Metadata</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>geektime</category>
      
      <category>arts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>geektime</tag>
      
      <tag>arts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefinedhello-world/"/>
    <url>hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>